/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var h=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var S=(n,t)=>{for(var e in t)h(n,e,{get:t[e],enumerable:!0})},v=(n,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of f(t))!x.call(n,a)&&a!==e&&h(n,a,{get:()=>t[a],enumerable:!(s=u(t,a))||s.enumerable});return n};var w=n=>v(h({},"__esModule",{value:!0}),n);var L={};S(L,{default:()=>l});module.exports=w(L);var i=require("obsidian"),p={RTL:["R"],LTR:["L"]},l=class extends i.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new d(this.app,this)),await this.patchMathJax()}async patchMathJax(){var t;(t=this.mathjaxPatcher)==null||t.destroy(),this.mathjaxPatcher=new c(this.settings.cmds),await this.mathjaxPatcher.init()}async loadSettings(){let t=await this.loadData();this.settings={cmds:Object.assign({},p,t==null?void 0:t.cmds)}}async saveSettings(){await this.saveData(this.settings),await this.patchMathJax()}onunload(){var t;(t=this.mathjaxPatcher)==null||t.destroy(),this.mathjaxPatcher=void 0}},c=class{constructor(t){this.cmds=t}async init(){await(0,i.loadMathJax)();let t=[];for(let e in this.cmds)for(let s of this.cmds[e])t.push(`\\def\\${s}#1{\\class{mjx-${e.toLowerCase()}}{#1}}`);window.MathJax.tex2chtml(t.join(`
`),{display:!1}),await(0,i.finishRenderMath)(),this.patchStyles(),this.mathjaxStyleObserver=new MutationObserver(()=>this.patchStyles()),this.mathjaxStyleObserver.observe(this.getMathJaxStyleElement(),{attributes:!0})}destroy(){var t,e;(t=this.mathjaxStyleObserver)==null||t.disconnect(),(e=this.styleEl)==null||e.remove()}patchStyles(){var e;let t=this.convertMathJaxStylesToLogicalProperties();(e=this.styleEl)==null||e.remove(),this.styleEl=document.head.createEl("style",{text:t.join(`
`)})}getMathJaxStyleElement(){return document.getElementById("MJX-CHTML-styles")}convertMathJaxStylesToLogicalProperties(){let t=[],e=this.getMathJaxStyleElement();if(!e||!e.sheet)return t;for(let s of Array.from(e.sheet.cssRules)){if(!(s instanceof CSSStyleRule))continue;let a=[],r=s.style.getPropertyValue("padding-left"),o=s.style.getPropertyValue("padding-right"),m=s.style.getPropertyValue("margin-left"),g=s.style.getPropertyValue("margin-right");if(r&&a.push(`padding-inline-start: ${r};`),o&&a.push(`padding-inline-end: ${o};`),m&&a.push(`margin-inline-start: ${m};`),g&&a.push(`margin-inline-end: ${g};`),a.length>0){let y=`${s.selectorText} {
  ${a.join(`
  `)}
}`;t.push(y)}}return t}},d=class extends i.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("p",{text:"Changes may require restarting Obsidian to take full effect.",cls:"setting-item-description"});let e=this.plugin.settings.cmds;for(let s in e)new i.Setting(t).setName(`${s} commands`).setDesc(`Comma-separated list of commands for ${s}`).addText(a=>a.setPlaceholder(s==="RTL"?"e.g. R, RLE":"e.g. L, LRE").setValue(e[s].join(", ")).onChange((0,i.debounce)(async r=>{e[s]=r.split(",").map(o=>o.trim()).filter(Boolean),await this.plugin.saveSettings()},2e3,!0)));new i.Setting(t).addButton(s=>s.setButtonText("Restore defaults").onClick(async()=>{this.plugin.settings.cmds={...p},await this.plugin.saveSettings(),this.display()}))}};

/* nosourcemap */